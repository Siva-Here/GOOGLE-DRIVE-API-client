{"ast":null,"code":"var _jsxFileName = \"/home/s1v4h3r3/Desktop/S1V4H3R3/WEB/FILE UPLOAD MERN/client/src/App.js\",\n  _s = $RefreshSig$();\n// // import React, { useState } from 'react';\n// // import axios from 'axios';\n\n// // function App() {\n// //   const [billName, setBillName] = useState('');\n// //   const [billCategory, setBillCategory] = useState('');\n// //   const [billAmount, setBillAmount] = useState('');\n// //   const [billFile, setBillFile] = useState(null);\n// //   const [errorMessage, setErrorMessage] = useState('');\n\n// //   // Predefined bill category options\n// //   const billCategories = ['Groceries', 'Utilities', 'Entertainment', 'Healthcare'];\n\n// //   const handleFileChange = (e) => {\n// //     setBillFile(e.target.files[0]);\n// //   };\n\n// //   const handleSubmit = async (e) => {\n// //     e.preventDefault();\n\n// //     // Validation and sanitization\n// //     if (!billName || !billCategory || !billAmount || !billFile) {\n// //       setErrorMessage('All fields are required');\n// //       return;\n// //     }\n\n// //     if (!billCategories.includes(billCategory)) {\n// //       setErrorMessage('Invalid bill category');\n// //       return;\n// //     }\n\n// //     // Sanitize bill amount\n// //     const sanitizedAmount = parseFloat(billAmount);\n\n// //     if (isNaN(sanitizedAmount) || sanitizedAmount <= 0) {\n// //       setErrorMessage('Please enter a valid amount');\n// //       return;\n// //     }\n\n// //     // File type validation (optional)\n// //     const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png'];\n// //     if (!allowedTypes.includes(billFile.type)) {\n// //       setErrorMessage('Invalid file type. Only JPEG, JPG, and PNG files are allowed.');\n// //       return;\n// //     }\n\n// //     // File size validation (optional)\n// //     if (billFile.size > 1024 * 1024) { // 1MB\n// //       setErrorMessage('File is too large. Maximum size allowed is 1MB.');\n// //       return;\n// //     }\n\n// //     // Create FormData object\n// //     const formData = new FormData();\n// //     formData.append('billName', billName.trim()); // Trim leading and trailing spaces\n// //     formData.append('billCategory', billCategory);\n// //     formData.append('billAmount', sanitizedAmount);\n// //     formData.append('file', billFile);\n\n// //     // Submit form\n// //     try {\n// //       const response = await axios.post('http://localhost:5000/upload', formData, {\n// //         headers: {\n// //           'Content-Type': 'multipart/form-data'\n// //         }\n// //       });\n// //       console.log(response.data);\n// //       // Reset form fields and error message on successful upload\n// //       setBillName('');\n// //       setBillCategory('');\n// //       setBillAmount('');\n// //       setBillFile(null);\n// //       setErrorMessage('');\n// //     } catch (error) {\n// //       console.error('Error uploading file:', error.response.data.error);\n// //       setErrorMessage('Failed to upload file. Please try again later.');\n// //     }\n// //   };\n\n// //   return (\n// //     <div>\n// //       <h1>Upload Bill</h1>\n// //       {errorMessage && <div style={{ color: 'red' }}>{errorMessage}</div>}\n// //       <form onSubmit={handleSubmit}>\n// //         <div>\n// //           <label>Bill Name:</label>\n// //           <input type=\"text\" value={billName} onChange={(e) => setBillName(e.target.value)} />\n// //         </div>\n// //         <div>\n// //           <label>Bill Category:</label>\n// //           <select value={billCategory} onChange={(e) => setBillCategory(e.target.value)}>\n// //             <option value=\"\">Select Bill Category</option>\n// //             {billCategories.map((category) => (\n// //               <option selected key={category} value={category}>{category}</option>\n// //             ))}\n// //           </select>\n// //         </div>\n// //         <div>\n// //           <label>Bill Amount:</label>\n// //           <input type=\"text\" value={billAmount} onChange={(e) => setBillAmount(e.target.value)} />\n// //         </div>\n// //         <div>\n// //           <label>Upload Bill:</label>\n// //           <input type=\"file\" accept=\"image/jpeg, image/jpg, image/png\" onChange={handleFileChange} />\n// //         </div>\n// //         <button type=\"submit\">Submit</button>\n// //       </form>\n// //     </div>\n// //   );\n// // }\n\n// // export default App;\n\n// // import React, { useState, useRef } from 'react';\n// // import axios from 'axios';\n// // import Webcam from 'react-webcam';\n\n// // function App() {\n// //   const [billName, setBillName] = useState('');\n// //   const [billCategory, setBillCategory] = useState('');\n// //   const [billAmount, setBillAmount] = useState('');\n// //   const [errorMessage, setErrorMessage] = useState('');\n// //   const webcamRef = useRef(null);\n\n// //   // Predefined bill category options\n// //   const billCategories = ['Groceries', 'Utilities', 'Entertainment', 'Healthcare'];\n\n// //   const capture = () => {\n// //     const imageSrc = webcamRef.current.getScreenshot();\n// //     // handle captured image\n// //   };\n\n// //   const handleSubmit = async (e) => {\n// //     e.preventDefault();\n\n// //     // Validation and sanitization\n// //     if (!billName || !billCategory || !billAmount) {\n// //       setErrorMessage('All fields are required');\n// //       return;\n// //     }\n\n// //     if (!billCategories.includes(billCategory)) {\n// //       setErrorMessage('Invalid bill category');\n// //       return;\n// //     }\n\n// //     const formData = new FormData();\n// //     formData.append('billName', billName.trim());\n// //     formData.append('billCategory', billCategory);\n// //     formData.append('billAmount', parseFloat(billAmount));\n\n// //     // Capture image from webcam\n// //     const imageSrc = webcamRef.current.getScreenshot();\n\n// //     // Convert base64 image to Blob\n// //     const blob = await fetch(imageSrc).then((res) => res.blob());\n\n// //     // Append the image file to the form data with the key 'file'\n// //     formData.append('file', blob, 'captured_image.jpeg');\n\n// //     // Print file properties on console\n// //     console.log('File Properties:');\n// //     console.log('File name:', blob.name);\n// //     console.log('File type:', blob.type);\n// //     console.log('File size:', blob.size, 'bytes');\n\n// //     // Submit form\n// //     try {\n// //       const response = await axios.post('http://localhost:5000/upload', formData, {\n// //         headers: {\n// //           'Content-Type': 'multipart/form-data'\n// //         }\n// //       });\n// //       console.log(response.data);\n// //       // Reset form fields and error message on successful upload\n// //       setBillName('');\n// //       setBillCategory('');\n// //       setBillAmount('');\n// //       setErrorMessage('');\n// //     } catch (error) {\n// //       console.error('Error uploading file:', error.response.data.error);\n// //       setErrorMessage('Failed to upload file. Please try again later.');\n// //     }\n// //   };\n\n// //   return (\n// //     <div>\n// //       <h1>Upload Bill</h1>\n// //       {errorMessage && <div style={{ color: 'red' }}>{errorMessage}</div>}\n// //       <form onSubmit={handleSubmit}>\n// //         <div>\n// //           <label>Bill Name:</label>\n// //           <input type=\"text\" value={billName} onChange={(e) => setBillName(e.target.value)} />\n// //         </div>\n// //         <div>\n// //           <label>Bill Category:</label>\n// //           <select value={billCategory} onChange={(e) => setBillCategory(e.target.value)}>\n// //             <option value=\"\">Select Bill Category</option>\n// //             {billCategories.map((category) => (\n// //               <option key={category} value={category}>{category}</option>\n// //             ))}\n// //           </select>\n// //         </div>\n// //         <div>\n// //           <label>Bill Amount:</label>\n// //           <input type=\"text\" value={billAmount} onChange={(e) => setBillAmount(e.target.value)} />\n// //         </div>\n// //         <div>\n// //           <label>Upload Bill:</label>\n// //           <Webcam\n// //             audio={false}\n// //             ref={webcamRef}\n// //             screenshotFormat=\"image/jpeg\"\n// //           />\n// //           <button onClick={capture}>Capture</button>\n// //         </div>\n// //         <button type=\"submit\">Submit</button>\n// //       </form>\n// //     </div>\n// //   );\n// // }\n\n// // export default App;\n\n// import React, { useState, useRef } from 'react';\n// import axios from 'axios';\n// import Webcam from 'react-webcam';\n\n// function App() {\n//   const [billName, setBillName] = useState('');\n//   const [billCategory, setBillCategory] = useState('');\n//   const [billAmount, setBillAmount] = useState('');\n//   const [errorMessage, setErrorMessage] = useState('');\n//   const [uploadMode, setUploadMode] = useState('file'); // 'file' or 'webcam'\n//   const webcamRef = useRef(null);\n//   const [billFile, setBillFile] = useState(null);\n\n//   // Predefined bill category options\n//   const billCategories = ['Groceries', 'Utilities', 'Entertainment', 'Healthcare'];\n\n//   const handleFileChange = (e) => {\n//     setUploadMode('file');\n//     setBillFile(e.target.files[0]);\n//   };\n\n//   const capture = () => {\n//     setUploadMode('webcam');\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n\n//     // Validation and sanitization\n//     if (!billName || !billCategory || !billAmount) {\n//       setErrorMessage('All fields are required');\n//       return;\n//     }\n\n//     if (!billCategories.includes(billCategory)) {\n//       setErrorMessage('Invalid bill category');\n//       return;\n//     }\n\n//     // Choose appropriate upload method based on upload mode\n//     if (uploadMode === 'file') {\n//       // Handle file upload\n//       if (!billFile) {\n//         setErrorMessage('Please select a file');\n//         return;\n//       }\n//       const formData = new FormData();\n//       formData.append('billName', billName.trim());\n//       formData.append('billCategory', billCategory);\n//       formData.append('billAmount', parseFloat(billAmount));\n//       formData.append('file', billFile);\n//       // Submit form with file\n//       try {\n//         const response = await axios.post('http://localhost:5000/upload', formData, {\n//           headers: {\n//             'Content-Type': 'multipart/form-data'\n//           }\n//         });\n//         console.log(response.data);\n//         // Reset form fields and error message on successful upload\n//         setBillName('');\n//         setBillCategory('');\n//         setBillAmount('');\n//         setBillFile(null);\n//         setErrorMessage('');\n//       } catch (error) {\n//         console.error('Error uploading file:', error.response.data.error);\n//         setErrorMessage('Failed to upload file. Please try again later.');\n//       }\n//     } else if (uploadMode === 'webcam') {\n//       // Handle webcam capture\n//       const imageSrc = webcamRef.current.getScreenshot();\n//       // Convert imageSrc to Blob\n//       const blob = await fetch(imageSrc).then((res) => res.blob());\n//       // Handle image blob\n//       const formData = new FormData();\n//       formData.append('billName', billName.trim());\n//       formData.append('billCategory', billCategory);\n//       formData.append('billAmount', parseFloat(billAmount));\n//       formData.append('file', blob, 'webcam_image.jpeg');\n//       // Submit form with webcam image\n//       try {\n//         const response = await axios.post('http://localhost:5000/upload', formData, {\n//           headers: {\n//             'Content-Type': 'multipart/form-data'\n//           }\n//         });\n//         console.log(response.data);\n//         // Reset form fields and error message on successful upload\n//         setBillName('');\n//         setBillCategory('');\n//         setBillAmount('');\n//         setErrorMessage('');\n//       } catch (error) {\n//         console.error('Error uploading webcam image:', error.response.data.error);\n//         setErrorMessage('Failed to upload webcam image. Please try again later.');\n//       }\n//     }\n//   };\n\n//   const switchMode = () => {\n//     if (uploadMode === 'file') {\n//       // Clear webcam image when switching back to file upload mode\n//       setBillFile(null);\n//     }\n//     setUploadMode(uploadMode === 'file' ? 'webcam' : 'file');\n//   };\n\n//   return (\n//     <div>\n//       <h1>Upload Bill</h1>\n//       {errorMessage && <div style={{ color: 'red' }}>{errorMessage}</div>}\n//       <form onSubmit={handleSubmit}>\n//         <div>\n//           <label>Bill Name:</label>\n//           <input type=\"text\" value={billName} onChange={(e) => setBillName(e.target.value)} />\n//         </div>\n//         <div>\n//           <label>Bill Category:</label>\n//           <select value={billCategory} onChange={(e) => setBillCategory(e.target.value)}>\n//             <option value=\"\">Select Bill Category</option>\n//             {billCategories.map((category) => (\n//               <option key={category} value={category}>{category}</option>\n//             ))}\n//           </select>\n//         </div>\n//         <div>\n//           <label>Bill Amount:</label>\n//           <input type=\"text\" value={billAmount} onChange={(e) => setBillAmount(e.target.value)} />\n//         </div>\n//         <div>\n//           <label>Upload Bill:</label>\n//           {uploadMode === 'file' && (\n//             <input type=\"file\" accept=\"image/jpeg, image/jpg, image/png\" onChange={handleFileChange} />\n//           )}\n//           {uploadMode === 'webcam' && (\n//             <Webcam\n//               audio={false}\n//               ref={webcamRef}\n//               screenshotFormat=\"image/jpeg\"\n//             />\n//           )}\n//           <button type=\"button\" onClick={switchMode}>Switch to {uploadMode === 'file' ? 'Webcam' : 'File'}</button>\n//         </div>\n//         <button type=\"submit\">Submit</button>\n//       </form>\n//     </div>\n//   );\n// }\n\n// export default App;\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [billFile, setBillFile] = useState(null);\n  const [errorMessage, setErrorMessage] = useState('');\n  const handleFileChange = e => {\n    setBillFile(e.target.files[0]);\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!billFile) {\n      setErrorMessage('Please select a file');\n      return;\n    }\n    const allowedTypes = ['application/pdf'];\n    if (!allowedTypes.includes(billFile.type)) {\n      setErrorMessage('Invalid file type. Only PDF files are allowed.');\n      return;\n    }\n    if (billFile.size > 30 * 1024 * 1024) {\n      // 1MB\n      setErrorMessage('File is too large. Maximum size allowed is 1MB.');\n      return;\n    }\n    const formData = new FormData();\n    formData.append('file', billFile);\n    try {\n      const response = await axios.post('http://localhost:5000/upload', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      console.log(response.data);\n      setBillFile(null);\n      setErrorMessage('');\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Error uploading file:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || error.message);\n      setErrorMessage('Failed to upload file. Please try again later.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Upload Bill\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 428,\n      columnNumber: 7\n    }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: 'red'\n      },\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 429,\n      columnNumber: 24\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Upload Bill:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 432,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \"application/pdf\",\n          onChange: handleFileChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 433,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 431,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 435,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 430,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 427,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"6pa7wC3oKz/00/jkaqH66nVeOd0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","App","_s","billFile","setBillFile","errorMessage","setErrorMessage","handleFileChange","e","target","files","handleSubmit","preventDefault","allowedTypes","includes","type","size","formData","FormData","append","response","post","headers","console","log","data","error","_error$response","_error$response$data","message","children","fileName","_jsxFileName","lineNumber","columnNumber","style","color","onSubmit","accept","onChange","_c","$RefreshReg$"],"sources":["/home/s1v4h3r3/Desktop/S1V4H3R3/WEB/FILE UPLOAD MERN/client/src/App.js"],"sourcesContent":["// // import React, { useState } from 'react';\n// // import axios from 'axios';\n\n// // function App() {\n// //   const [billName, setBillName] = useState('');\n// //   const [billCategory, setBillCategory] = useState('');\n// //   const [billAmount, setBillAmount] = useState('');\n// //   const [billFile, setBillFile] = useState(null);\n// //   const [errorMessage, setErrorMessage] = useState('');\n\n// //   // Predefined bill category options\n// //   const billCategories = ['Groceries', 'Utilities', 'Entertainment', 'Healthcare'];\n\n// //   const handleFileChange = (e) => {\n// //     setBillFile(e.target.files[0]);\n// //   };\n\n// //   const handleSubmit = async (e) => {\n// //     e.preventDefault();\n    \n// //     // Validation and sanitization\n// //     if (!billName || !billCategory || !billAmount || !billFile) {\n// //       setErrorMessage('All fields are required');\n// //       return;\n// //     }\n\n// //     if (!billCategories.includes(billCategory)) {\n// //       setErrorMessage('Invalid bill category');\n// //       return;\n// //     }\n\n// //     // Sanitize bill amount\n// //     const sanitizedAmount = parseFloat(billAmount);\n\n// //     if (isNaN(sanitizedAmount) || sanitizedAmount <= 0) {\n// //       setErrorMessage('Please enter a valid amount');\n// //       return;\n// //     }\n\n// //     // File type validation (optional)\n// //     const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png'];\n// //     if (!allowedTypes.includes(billFile.type)) {\n// //       setErrorMessage('Invalid file type. Only JPEG, JPG, and PNG files are allowed.');\n// //       return;\n// //     }\n\n// //     // File size validation (optional)\n// //     if (billFile.size > 1024 * 1024) { // 1MB\n// //       setErrorMessage('File is too large. Maximum size allowed is 1MB.');\n// //       return;\n// //     }\n\n// //     // Create FormData object\n// //     const formData = new FormData();\n// //     formData.append('billName', billName.trim()); // Trim leading and trailing spaces\n// //     formData.append('billCategory', billCategory);\n// //     formData.append('billAmount', sanitizedAmount);\n// //     formData.append('file', billFile);\n\n// //     // Submit form\n// //     try {\n// //       const response = await axios.post('http://localhost:5000/upload', formData, {\n// //         headers: {\n// //           'Content-Type': 'multipart/form-data'\n// //         }\n// //       });\n// //       console.log(response.data);\n// //       // Reset form fields and error message on successful upload\n// //       setBillName('');\n// //       setBillCategory('');\n// //       setBillAmount('');\n// //       setBillFile(null);\n// //       setErrorMessage('');\n// //     } catch (error) {\n// //       console.error('Error uploading file:', error.response.data.error);\n// //       setErrorMessage('Failed to upload file. Please try again later.');\n// //     }\n// //   };\n\n// //   return (\n// //     <div>\n// //       <h1>Upload Bill</h1>\n// //       {errorMessage && <div style={{ color: 'red' }}>{errorMessage}</div>}\n// //       <form onSubmit={handleSubmit}>\n// //         <div>\n// //           <label>Bill Name:</label>\n// //           <input type=\"text\" value={billName} onChange={(e) => setBillName(e.target.value)} />\n// //         </div>\n// //         <div>\n// //           <label>Bill Category:</label>\n// //           <select value={billCategory} onChange={(e) => setBillCategory(e.target.value)}>\n// //             <option value=\"\">Select Bill Category</option>\n// //             {billCategories.map((category) => (\n// //               <option selected key={category} value={category}>{category}</option>\n// //             ))}\n// //           </select>\n// //         </div>\n// //         <div>\n// //           <label>Bill Amount:</label>\n// //           <input type=\"text\" value={billAmount} onChange={(e) => setBillAmount(e.target.value)} />\n// //         </div>\n// //         <div>\n// //           <label>Upload Bill:</label>\n// //           <input type=\"file\" accept=\"image/jpeg, image/jpg, image/png\" onChange={handleFileChange} />\n// //         </div>\n// //         <button type=\"submit\">Submit</button>\n// //       </form>\n// //     </div>\n// //   );\n// // }\n\n// // export default App;\n\n\n// // import React, { useState, useRef } from 'react';\n// // import axios from 'axios';\n// // import Webcam from 'react-webcam';\n\n// // function App() {\n// //   const [billName, setBillName] = useState('');\n// //   const [billCategory, setBillCategory] = useState('');\n// //   const [billAmount, setBillAmount] = useState('');\n// //   const [errorMessage, setErrorMessage] = useState('');\n// //   const webcamRef = useRef(null);\n\n// //   // Predefined bill category options\n// //   const billCategories = ['Groceries', 'Utilities', 'Entertainment', 'Healthcare'];\n\n// //   const capture = () => {\n// //     const imageSrc = webcamRef.current.getScreenshot();\n// //     // handle captured image\n// //   };\n\n// //   const handleSubmit = async (e) => {\n// //     e.preventDefault();\n\n// //     // Validation and sanitization\n// //     if (!billName || !billCategory || !billAmount) {\n// //       setErrorMessage('All fields are required');\n// //       return;\n// //     }\n\n// //     if (!billCategories.includes(billCategory)) {\n// //       setErrorMessage('Invalid bill category');\n// //       return;\n// //     }\n\n// //     const formData = new FormData();\n// //     formData.append('billName', billName.trim());\n// //     formData.append('billCategory', billCategory);\n// //     formData.append('billAmount', parseFloat(billAmount));\n\n// //     // Capture image from webcam\n// //     const imageSrc = webcamRef.current.getScreenshot();\n\n// //     // Convert base64 image to Blob\n// //     const blob = await fetch(imageSrc).then((res) => res.blob());\n\n// //     // Append the image file to the form data with the key 'file'\n// //     formData.append('file', blob, 'captured_image.jpeg');\n\n// //     // Print file properties on console\n// //     console.log('File Properties:');\n// //     console.log('File name:', blob.name);\n// //     console.log('File type:', blob.type);\n// //     console.log('File size:', blob.size, 'bytes');\n\n// //     // Submit form\n// //     try {\n// //       const response = await axios.post('http://localhost:5000/upload', formData, {\n// //         headers: {\n// //           'Content-Type': 'multipart/form-data'\n// //         }\n// //       });\n// //       console.log(response.data);\n// //       // Reset form fields and error message on successful upload\n// //       setBillName('');\n// //       setBillCategory('');\n// //       setBillAmount('');\n// //       setErrorMessage('');\n// //     } catch (error) {\n// //       console.error('Error uploading file:', error.response.data.error);\n// //       setErrorMessage('Failed to upload file. Please try again later.');\n// //     }\n// //   };\n\n// //   return (\n// //     <div>\n// //       <h1>Upload Bill</h1>\n// //       {errorMessage && <div style={{ color: 'red' }}>{errorMessage}</div>}\n// //       <form onSubmit={handleSubmit}>\n// //         <div>\n// //           <label>Bill Name:</label>\n// //           <input type=\"text\" value={billName} onChange={(e) => setBillName(e.target.value)} />\n// //         </div>\n// //         <div>\n// //           <label>Bill Category:</label>\n// //           <select value={billCategory} onChange={(e) => setBillCategory(e.target.value)}>\n// //             <option value=\"\">Select Bill Category</option>\n// //             {billCategories.map((category) => (\n// //               <option key={category} value={category}>{category}</option>\n// //             ))}\n// //           </select>\n// //         </div>\n// //         <div>\n// //           <label>Bill Amount:</label>\n// //           <input type=\"text\" value={billAmount} onChange={(e) => setBillAmount(e.target.value)} />\n// //         </div>\n// //         <div>\n// //           <label>Upload Bill:</label>\n// //           <Webcam\n// //             audio={false}\n// //             ref={webcamRef}\n// //             screenshotFormat=\"image/jpeg\"\n// //           />\n// //           <button onClick={capture}>Capture</button>\n// //         </div>\n// //         <button type=\"submit\">Submit</button>\n// //       </form>\n// //     </div>\n// //   );\n// // }\n\n// // export default App;\n\n\n// import React, { useState, useRef } from 'react';\n// import axios from 'axios';\n// import Webcam from 'react-webcam';\n\n// function App() {\n//   const [billName, setBillName] = useState('');\n//   const [billCategory, setBillCategory] = useState('');\n//   const [billAmount, setBillAmount] = useState('');\n//   const [errorMessage, setErrorMessage] = useState('');\n//   const [uploadMode, setUploadMode] = useState('file'); // 'file' or 'webcam'\n//   const webcamRef = useRef(null);\n//   const [billFile, setBillFile] = useState(null);\n\n//   // Predefined bill category options\n//   const billCategories = ['Groceries', 'Utilities', 'Entertainment', 'Healthcare'];\n\n//   const handleFileChange = (e) => {\n//     setUploadMode('file');\n//     setBillFile(e.target.files[0]);\n//   };\n\n//   const capture = () => {\n//     setUploadMode('webcam');\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n\n//     // Validation and sanitization\n//     if (!billName || !billCategory || !billAmount) {\n//       setErrorMessage('All fields are required');\n//       return;\n//     }\n\n//     if (!billCategories.includes(billCategory)) {\n//       setErrorMessage('Invalid bill category');\n//       return;\n//     }\n\n//     // Choose appropriate upload method based on upload mode\n//     if (uploadMode === 'file') {\n//       // Handle file upload\n//       if (!billFile) {\n//         setErrorMessage('Please select a file');\n//         return;\n//       }\n//       const formData = new FormData();\n//       formData.append('billName', billName.trim());\n//       formData.append('billCategory', billCategory);\n//       formData.append('billAmount', parseFloat(billAmount));\n//       formData.append('file', billFile);\n//       // Submit form with file\n//       try {\n//         const response = await axios.post('http://localhost:5000/upload', formData, {\n//           headers: {\n//             'Content-Type': 'multipart/form-data'\n//           }\n//         });\n//         console.log(response.data);\n//         // Reset form fields and error message on successful upload\n//         setBillName('');\n//         setBillCategory('');\n//         setBillAmount('');\n//         setBillFile(null);\n//         setErrorMessage('');\n//       } catch (error) {\n//         console.error('Error uploading file:', error.response.data.error);\n//         setErrorMessage('Failed to upload file. Please try again later.');\n//       }\n//     } else if (uploadMode === 'webcam') {\n//       // Handle webcam capture\n//       const imageSrc = webcamRef.current.getScreenshot();\n//       // Convert imageSrc to Blob\n//       const blob = await fetch(imageSrc).then((res) => res.blob());\n//       // Handle image blob\n//       const formData = new FormData();\n//       formData.append('billName', billName.trim());\n//       formData.append('billCategory', billCategory);\n//       formData.append('billAmount', parseFloat(billAmount));\n//       formData.append('file', blob, 'webcam_image.jpeg');\n//       // Submit form with webcam image\n//       try {\n//         const response = await axios.post('http://localhost:5000/upload', formData, {\n//           headers: {\n//             'Content-Type': 'multipart/form-data'\n//           }\n//         });\n//         console.log(response.data);\n//         // Reset form fields and error message on successful upload\n//         setBillName('');\n//         setBillCategory('');\n//         setBillAmount('');\n//         setErrorMessage('');\n//       } catch (error) {\n//         console.error('Error uploading webcam image:', error.response.data.error);\n//         setErrorMessage('Failed to upload webcam image. Please try again later.');\n//       }\n//     }\n//   };\n\n//   const switchMode = () => {\n//     if (uploadMode === 'file') {\n//       // Clear webcam image when switching back to file upload mode\n//       setBillFile(null);\n//     }\n//     setUploadMode(uploadMode === 'file' ? 'webcam' : 'file');\n//   };\n\n//   return (\n//     <div>\n//       <h1>Upload Bill</h1>\n//       {errorMessage && <div style={{ color: 'red' }}>{errorMessage}</div>}\n//       <form onSubmit={handleSubmit}>\n//         <div>\n//           <label>Bill Name:</label>\n//           <input type=\"text\" value={billName} onChange={(e) => setBillName(e.target.value)} />\n//         </div>\n//         <div>\n//           <label>Bill Category:</label>\n//           <select value={billCategory} onChange={(e) => setBillCategory(e.target.value)}>\n//             <option value=\"\">Select Bill Category</option>\n//             {billCategories.map((category) => (\n//               <option key={category} value={category}>{category}</option>\n//             ))}\n//           </select>\n//         </div>\n//         <div>\n//           <label>Bill Amount:</label>\n//           <input type=\"text\" value={billAmount} onChange={(e) => setBillAmount(e.target.value)} />\n//         </div>\n//         <div>\n//           <label>Upload Bill:</label>\n//           {uploadMode === 'file' && (\n//             <input type=\"file\" accept=\"image/jpeg, image/jpg, image/png\" onChange={handleFileChange} />\n//           )}\n//           {uploadMode === 'webcam' && (\n//             <Webcam\n//               audio={false}\n//               ref={webcamRef}\n//               screenshotFormat=\"image/jpeg\"\n//             />\n//           )}\n//           <button type=\"button\" onClick={switchMode}>Switch to {uploadMode === 'file' ? 'Webcam' : 'File'}</button>\n//         </div>\n//         <button type=\"submit\">Submit</button>\n//       </form>\n//     </div>\n//   );\n// }\n\n// export default App;\nimport React, { useState } from 'react';\nimport axios from 'axios';\n\nfunction App() {\n  const [billFile, setBillFile] = useState(null);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const handleFileChange = (e) => {\n    setBillFile(e.target.files[0]);\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    if (!billFile) {\n      setErrorMessage('Please select a file');\n      return;\n    }\n\n    const allowedTypes = ['application/pdf'];\n    if (!allowedTypes.includes(billFile.type)) {\n      setErrorMessage('Invalid file type. Only PDF files are allowed.');\n      return;\n    }\n\n    if (billFile.size >30* 1024 * 1024) { // 1MB\n      setErrorMessage('File is too large. Maximum size allowed is 1MB.');\n      return;\n    }\n\n    const formData = new FormData();\n    formData.append('file', billFile);\n\n    try {\n      const response = await axios.post('http://localhost:5000/upload', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      console.log(response.data);\n      setBillFile(null);\n      setErrorMessage('');\n    } catch (error) {\n      console.error('Error uploading file:', error.response?.data?.error || error.message);\n      setErrorMessage('Failed to upload file. Please try again later.');\n    }\n  };\n\n  return (\n    <div>\n      <h1>Upload Bill</h1>\n      {errorMessage && <div style={{ color: 'red' }}>{errorMessage}</div>}\n      <form onSubmit={handleSubmit}>\n        <div>\n          <label>Upload Bill:</label>\n          <input type=\"file\" accept=\"application/pdf\" onChange={handleFileChange} />\n        </div>\n        <button type=\"submit\">Submit</button>\n      </form>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACQ,YAAY,EAAEC,eAAe,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAEpD,MAAMU,gBAAgB,GAAIC,CAAC,IAAK;IAC9BJ,WAAW,CAACI,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;EAChC,CAAC;EAED,MAAMC,YAAY,GAAG,MAAOH,CAAC,IAAK;IAChCA,CAAC,CAACI,cAAc,CAAC,CAAC;IAElB,IAAI,CAACT,QAAQ,EAAE;MACbG,eAAe,CAAC,sBAAsB,CAAC;MACvC;IACF;IAEA,MAAMO,YAAY,GAAG,CAAC,iBAAiB,CAAC;IACxC,IAAI,CAACA,YAAY,CAACC,QAAQ,CAACX,QAAQ,CAACY,IAAI,CAAC,EAAE;MACzCT,eAAe,CAAC,gDAAgD,CAAC;MACjE;IACF;IAEA,IAAIH,QAAQ,CAACa,IAAI,GAAE,EAAE,GAAE,IAAI,GAAG,IAAI,EAAE;MAAE;MACpCV,eAAe,CAAC,iDAAiD,CAAC;MAClE;IACF;IAEA,MAAMW,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEhB,QAAQ,CAAC;IAEjC,IAAI;MACF,MAAMiB,QAAQ,GAAG,MAAMtB,KAAK,CAACuB,IAAI,CAAC,8BAA8B,EAAEJ,QAAQ,EAAE;QAC1EK,OAAO,EAAE;UACP,cAAc,EAAE;QAClB;MACF,CAAC,CAAC;MACFC,OAAO,CAACC,GAAG,CAACJ,QAAQ,CAACK,IAAI,CAAC;MAC1BrB,WAAW,CAAC,IAAI,CAAC;MACjBE,eAAe,CAAC,EAAE,CAAC;IACrB,CAAC,CAAC,OAAOoB,KAAK,EAAE;MAAA,IAAAC,eAAA,EAAAC,oBAAA;MACdL,OAAO,CAACG,KAAK,CAAC,uBAAuB,EAAE,EAAAC,eAAA,GAAAD,KAAK,CAACN,QAAQ,cAAAO,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBF,IAAI,cAAAG,oBAAA,uBAApBA,oBAAA,CAAsBF,KAAK,KAAIA,KAAK,CAACG,OAAO,CAAC;MACpFvB,eAAe,CAAC,gDAAgD,CAAC;IACnE;EACF,CAAC;EAED,oBACEN,OAAA;IAAA8B,QAAA,gBACE9B,OAAA;MAAA8B,QAAA,EAAI;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACnB7B,YAAY,iBAAIL,OAAA;MAAKmC,KAAK,EAAE;QAAEC,KAAK,EAAE;MAAM,CAAE;MAAAN,QAAA,EAAEzB;IAAY;MAAA0B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eACnElC,OAAA;MAAMqC,QAAQ,EAAE1B,YAAa;MAAAmB,QAAA,gBAC3B9B,OAAA;QAAA8B,QAAA,gBACE9B,OAAA;UAAA8B,QAAA,EAAO;QAAY;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eAC3BlC,OAAA;UAAOe,IAAI,EAAC,MAAM;UAACuB,MAAM,EAAC,iBAAiB;UAACC,QAAQ,EAAEhC;QAAiB;UAAAwB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACvE,CAAC,eACNlC,OAAA;QAAQe,IAAI,EAAC,QAAQ;QAAAe,QAAA,EAAC;MAAM;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEV;AAAChC,EAAA,CA1DQD,GAAG;AAAAuC,EAAA,GAAHvC,GAAG;AA4DZ,eAAeA,GAAG;AAAC,IAAAuC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
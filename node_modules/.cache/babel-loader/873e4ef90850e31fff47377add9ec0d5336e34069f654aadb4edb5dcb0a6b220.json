{"ast":null,"code":"var _jsxFileName = \"/home/s1v4h3r3/Desktop/S1V4H3R3/WEB/FILE UPLOAD MERN/client/src/App.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import axios from 'axios';\n\n// function App() {\n//   const [billName, setBillName] = useState('');\n//   const [billCategory, setBillCategory] = useState('');\n//   const [billAmount, setBillAmount] = useState('');\n//   const [billFile, setBillFile] = useState(null);\n//   const [errorMessage, setErrorMessage] = useState('');\n\n//   // Predefined bill category options\n//   const billCategories = ['Groceries', 'Utilities', 'Entertainment', 'Healthcare'];\n\n//   const handleFileChange = (e) => {\n//     setBillFile(e.target.files[0]);\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n\n//     // Validation and sanitization\n//     if (!billName || !billCategory || !billAmount || !billFile) {\n//       setErrorMessage('All fields are required');\n//       return;\n//     }\n\n//     if (!billCategories.includes(billCategory)) {\n//       setErrorMessage('Invalid bill category');\n//       return;\n//     }\n\n//     // Sanitize bill amount\n//     const sanitizedAmount = parseFloat(billAmount);\n\n//     if (isNaN(sanitizedAmount) || sanitizedAmount <= 0) {\n//       setErrorMessage('Please enter a valid amount');\n//       return;\n//     }\n\n//     // File type validation (optional)\n//     const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png'];\n//     if (!allowedTypes.includes(billFile.type)) {\n//       setErrorMessage('Invalid file type. Only JPEG, JPG, and PNG files are allowed.');\n//       return;\n//     }\n\n//     // File size validation (optional)\n//     if (billFile.size > 1024 * 1024) { // 1MB\n//       setErrorMessage('File is too large. Maximum size allowed is 1MB.');\n//       return;\n//     }\n\n//     // Create FormData object\n//     const formData = new FormData();\n//     formData.append('billName', billName.trim()); // Trim leading and trailing spaces\n//     formData.append('billCategory', billCategory);\n//     formData.append('billAmount', sanitizedAmount);\n//     formData.append('file', billFile);\n\n//     // Submit form\n//     try {\n//       const response = await axios.post('http://localhost:5000/upload', formData, {\n//         headers: {\n//           'Content-Type': 'multipart/form-data'\n//         }\n//       });\n//       console.log(response.data);\n//       // Reset form fields and error message on successful upload\n//       setBillName('');\n//       setBillCategory('');\n//       setBillAmount('');\n//       setBillFile(null);\n//       setErrorMessage('');\n//     } catch (error) {\n//       console.error('Error uploading file:', error.response.data.error);\n//       setErrorMessage('Failed to upload file. Please try again later.');\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h1>Upload Bill</h1>\n//       {errorMessage && <div style={{ color: 'red' }}>{errorMessage}</div>}\n//       <form onSubmit={handleSubmit}>\n//         <div>\n//           <label>Bill Name:</label>\n//           <input type=\"text\" value={billName} onChange={(e) => setBillName(e.target.value)} />\n//         </div>\n//         <div>\n//           <label>Bill Category:</label>\n//           <select value={billCategory} onChange={(e) => setBillCategory(e.target.value)}>\n//             <option value=\"\">Select Bill Category</option>\n//             {billCategories.map((category) => (\n//               <option selected key={category} value={category}>{category}</option>\n//             ))}\n//           </select>\n//         </div>\n//         <div>\n//           <label>Bill Amount:</label>\n//           <input type=\"text\" value={billAmount} onChange={(e) => setBillAmount(e.target.value)} />\n//         </div>\n//         <div>\n//           <label>Upload Bill:</label>\n//           <input type=\"file\" accept=\"image/jpeg, image/jpg, image/png\" onChange={handleFileChange} />\n//         </div>\n//         <button type=\"submit\">Submit</button>\n//       </form>\n//     </div>\n//   );\n// }\n\n// export default App;\n\nimport React, { useState, useRef } from 'react';\nimport axios from 'axios';\nimport Webcam from 'react-webcam';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [billName, setBillName] = useState('');\n  const [billCategory, setBillCategory] = useState('');\n  const [billAmount, setBillAmount] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n  const webcamRef = useRef(null);\n\n  // Predefined bill category options\n  const billCategories = ['Groceries', 'Utilities', 'Entertainment', 'Healthcare'];\n  const capture = () => {\n    const imageSrc = webcamRef.current.getScreenshot();\n    // handle captured image\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    // Validation and sanitization\n    if (!billName || !billCategory || !billAmount) {\n      setErrorMessage('All fields are required');\n      return;\n    }\n    if (!billCategories.includes(billCategory)) {\n      setErrorMessage('Invalid bill category');\n      return;\n    }\n    const formData = new FormData();\n    formData.append('billName', billName.trim());\n    formData.append('billCategory', billCategory);\n    formData.append('billAmount', parseFloat(billAmount));\n\n    // Capture image from webcam\n    const imageSrc = webcamRef.current.getScreenshot();\n\n    // Convert base64 image to Blob\n    const blob = await fetch(imageSrc).then(res => res.blob());\n    formData.append('billImage', blob, 'billImage.jpeg');\n\n    // Print file properties on console\n    console.log('File Properties:');\n    console.log('File name:', blob.name);\n    console.log('File type:', blob.type);\n    console.log('File size:', blob.size, 'bytes');\n\n    // Submit form\n    try {\n      const response = await axios.post('http://localhost:5000/upload', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      console.log(response.data);\n      // Reset form fields and error message on successful upload\n      setBillName('');\n      setBillCategory('');\n      setBillAmount('');\n      setErrorMessage('');\n    } catch (error) {\n      console.error('Error uploading file:', error.response.data.error);\n      setErrorMessage('Failed to upload file. Please try again later.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Upload Bill\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: 'red'\n      },\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 24\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Bill Name:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: billName,\n          onChange: e => setBillName(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Bill Category:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: billCategory,\n          onChange: e => setBillCategory(e.target.value),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Select Bill Category\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 13\n          }, this), billCategories.map(category => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: category,\n            children: category\n          }, category, false, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Bill Amount:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: billAmount,\n          onChange: e => setBillAmount(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Upload Bill:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Webcam, {\n          audio: false,\n          ref: webcamRef,\n          screenshotFormat: \"image/jpeg\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: capture,\n          children: \"Capture\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 185,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"WNV+tHBxf348c81KdYDRZDAGqnw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","axios","Webcam","jsxDEV","_jsxDEV","App","_s","billName","setBillName","billCategory","setBillCategory","billAmount","setBillAmount","errorMessage","setErrorMessage","webcamRef","billCategories","capture","imageSrc","current","getScreenshot","handleSubmit","e","preventDefault","includes","formData","FormData","append","trim","parseFloat","blob","fetch","then","res","console","log","name","type","size","response","post","headers","data","error","children","fileName","_jsxFileName","lineNumber","columnNumber","style","color","onSubmit","value","onChange","target","map","category","audio","ref","screenshotFormat","onClick","_c","$RefreshReg$"],"sources":["/home/s1v4h3r3/Desktop/S1V4H3R3/WEB/FILE UPLOAD MERN/client/src/App.js"],"sourcesContent":["// import React, { useState } from 'react';\n// import axios from 'axios';\n\n// function App() {\n//   const [billName, setBillName] = useState('');\n//   const [billCategory, setBillCategory] = useState('');\n//   const [billAmount, setBillAmount] = useState('');\n//   const [billFile, setBillFile] = useState(null);\n//   const [errorMessage, setErrorMessage] = useState('');\n\n//   // Predefined bill category options\n//   const billCategories = ['Groceries', 'Utilities', 'Entertainment', 'Healthcare'];\n\n//   const handleFileChange = (e) => {\n//     setBillFile(e.target.files[0]);\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n    \n//     // Validation and sanitization\n//     if (!billName || !billCategory || !billAmount || !billFile) {\n//       setErrorMessage('All fields are required');\n//       return;\n//     }\n\n//     if (!billCategories.includes(billCategory)) {\n//       setErrorMessage('Invalid bill category');\n//       return;\n//     }\n\n//     // Sanitize bill amount\n//     const sanitizedAmount = parseFloat(billAmount);\n\n//     if (isNaN(sanitizedAmount) || sanitizedAmount <= 0) {\n//       setErrorMessage('Please enter a valid amount');\n//       return;\n//     }\n\n//     // File type validation (optional)\n//     const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png'];\n//     if (!allowedTypes.includes(billFile.type)) {\n//       setErrorMessage('Invalid file type. Only JPEG, JPG, and PNG files are allowed.');\n//       return;\n//     }\n\n//     // File size validation (optional)\n//     if (billFile.size > 1024 * 1024) { // 1MB\n//       setErrorMessage('File is too large. Maximum size allowed is 1MB.');\n//       return;\n//     }\n\n//     // Create FormData object\n//     const formData = new FormData();\n//     formData.append('billName', billName.trim()); // Trim leading and trailing spaces\n//     formData.append('billCategory', billCategory);\n//     formData.append('billAmount', sanitizedAmount);\n//     formData.append('file', billFile);\n\n//     // Submit form\n//     try {\n//       const response = await axios.post('http://localhost:5000/upload', formData, {\n//         headers: {\n//           'Content-Type': 'multipart/form-data'\n//         }\n//       });\n//       console.log(response.data);\n//       // Reset form fields and error message on successful upload\n//       setBillName('');\n//       setBillCategory('');\n//       setBillAmount('');\n//       setBillFile(null);\n//       setErrorMessage('');\n//     } catch (error) {\n//       console.error('Error uploading file:', error.response.data.error);\n//       setErrorMessage('Failed to upload file. Please try again later.');\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h1>Upload Bill</h1>\n//       {errorMessage && <div style={{ color: 'red' }}>{errorMessage}</div>}\n//       <form onSubmit={handleSubmit}>\n//         <div>\n//           <label>Bill Name:</label>\n//           <input type=\"text\" value={billName} onChange={(e) => setBillName(e.target.value)} />\n//         </div>\n//         <div>\n//           <label>Bill Category:</label>\n//           <select value={billCategory} onChange={(e) => setBillCategory(e.target.value)}>\n//             <option value=\"\">Select Bill Category</option>\n//             {billCategories.map((category) => (\n//               <option selected key={category} value={category}>{category}</option>\n//             ))}\n//           </select>\n//         </div>\n//         <div>\n//           <label>Bill Amount:</label>\n//           <input type=\"text\" value={billAmount} onChange={(e) => setBillAmount(e.target.value)} />\n//         </div>\n//         <div>\n//           <label>Upload Bill:</label>\n//           <input type=\"file\" accept=\"image/jpeg, image/jpg, image/png\" onChange={handleFileChange} />\n//         </div>\n//         <button type=\"submit\">Submit</button>\n//       </form>\n//     </div>\n//   );\n// }\n\n// export default App;\n\nimport React, { useState, useRef } from 'react';\nimport axios from 'axios';\nimport Webcam from 'react-webcam';\n\nfunction App() {\n  const [billName, setBillName] = useState('');\n  const [billCategory, setBillCategory] = useState('');\n  const [billAmount, setBillAmount] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n  const webcamRef = useRef(null);\n\n  // Predefined bill category options\n  const billCategories = ['Groceries', 'Utilities', 'Entertainment', 'Healthcare'];\n\n  const capture = () => {\n    const imageSrc = webcamRef.current.getScreenshot();\n    // handle captured image\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    // Validation and sanitization\n    if (!billName || !billCategory || !billAmount) {\n      setErrorMessage('All fields are required');\n      return;\n    }\n\n    if (!billCategories.includes(billCategory)) {\n      setErrorMessage('Invalid bill category');\n      return;\n    }\n\n    const formData = new FormData();\n    formData.append('billName', billName.trim());\n    formData.append('billCategory', billCategory);\n    formData.append('billAmount', parseFloat(billAmount));\n\n    // Capture image from webcam\n    const imageSrc = webcamRef.current.getScreenshot();\n\n    // Convert base64 image to Blob\n    const blob = await fetch(imageSrc).then((res) => res.blob());\n    formData.append('billImage', blob, 'billImage.jpeg');\n\n    // Print file properties on console\n    console.log('File Properties:');\n    console.log('File name:', blob.name);\n    console.log('File type:', blob.type);\n    console.log('File size:', blob.size, 'bytes');\n\n    // Submit form\n    try {\n      const response = await axios.post('http://localhost:5000/upload', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      console.log(response.data);\n      // Reset form fields and error message on successful upload\n      setBillName('');\n      setBillCategory('');\n      setBillAmount('');\n      setErrorMessage('');\n    } catch (error) {\n      console.error('Error uploading file:', error.response.data.error);\n      setErrorMessage('Failed to upload file. Please try again later.');\n    }\n  };\n\n  return (\n    <div>\n      <h1>Upload Bill</h1>\n      {errorMessage && <div style={{ color: 'red' }}>{errorMessage}</div>}\n      <form onSubmit={handleSubmit}>\n        <div>\n          <label>Bill Name:</label>\n          <input type=\"text\" value={billName} onChange={(e) => setBillName(e.target.value)} />\n        </div>\n        <div>\n          <label>Bill Category:</label>\n          <select value={billCategory} onChange={(e) => setBillCategory(e.target.value)}>\n            <option value=\"\">Select Bill Category</option>\n            {billCategories.map((category) => (\n              <option key={category} value={category}>{category}</option>\n            ))}\n          </select>\n        </div>\n        <div>\n          <label>Bill Amount:</label>\n          <input type=\"text\" value={billAmount} onChange={(e) => setBillAmount(e.target.value)} />\n        </div>\n        <div>\n          <label>Upload Bill:</label>\n          <Webcam\n            audio={false}\n            ref={webcamRef}\n            screenshotFormat=\"image/jpeg\"\n          />\n          <button onClick={capture}>Capture</button>\n        </div>\n        <button type=\"submit\">Submit</button>\n      </form>\n    </div>\n  );\n}\n\nexport default App;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
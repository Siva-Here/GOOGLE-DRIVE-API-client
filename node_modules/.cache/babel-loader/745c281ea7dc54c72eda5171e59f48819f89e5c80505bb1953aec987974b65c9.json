{"ast":null,"code":"var _jsxFileName = \"/home/s1v4h3r3/Desktop/S1V4H3R3/WEB/FILE UPLOAD MERN/client/src/App.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import axios from 'axios';\n\n// function App() {\n//   const [billName, setBillName] = useState('');\n//   const [billCategory, setBillCategory] = useState('');\n//   const [billAmount, setBillAmount] = useState('');\n//   const [billFile, setBillFile] = useState(null);\n//   const [errorMessage, setErrorMessage] = useState('');\n\n//   // Predefined bill category options\n//   const billCategories = ['Groceries', 'Utilities', 'Entertainment', 'Healthcare'];\n\n//   const handleFileChange = (e) => {\n//     setBillFile(e.target.files[0]);\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n\n//     // Validation and sanitization\n//     if (!billName || !billCategory || !billAmount || !billFile) {\n//       setErrorMessage('All fields are required');\n//       return;\n//     }\n\n//     if (!billCategories.includes(billCategory)) {\n//       setErrorMessage('Invalid bill category');\n//       return;\n//     }\n\n//     // Sanitize bill amount\n//     const sanitizedAmount = parseFloat(billAmount);\n\n//     if (isNaN(sanitizedAmount) || sanitizedAmount <= 0) {\n//       setErrorMessage('Please enter a valid amount');\n//       return;\n//     }\n\n//     // File type validation (optional)\n//     const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png'];\n//     if (!allowedTypes.includes(billFile.type)) {\n//       setErrorMessage('Invalid file type. Only JPEG, JPG, and PNG files are allowed.');\n//       return;\n//     }\n\n//     // File size validation (optional)\n//     if (billFile.size > 1024 * 1024) { // 1MB\n//       setErrorMessage('File is too large. Maximum size allowed is 1MB.');\n//       return;\n//     }\n\n//     // Create FormData object\n//     const formData = new FormData();\n//     formData.append('billName', billName.trim()); // Trim leading and trailing spaces\n//     formData.append('billCategory', billCategory);\n//     formData.append('billAmount', sanitizedAmount);\n//     formData.append('file', billFile);\n\n//     // Submit form\n//     try {\n//       const response = await axios.post('http://localhost:5000/upload', formData, {\n//         headers: {\n//           'Content-Type': 'multipart/form-data'\n//         }\n//       });\n//       console.log(response.data);\n//       // Reset form fields and error message on successful upload\n//       setBillName('');\n//       setBillCategory('');\n//       setBillAmount('');\n//       setBillFile(null);\n//       setErrorMessage('');\n//     } catch (error) {\n//       console.error('Error uploading file:', error.response.data.error);\n//       setErrorMessage('Failed to upload file. Please try again later.');\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h1>Upload Bill</h1>\n//       {errorMessage && <div style={{ color: 'red' }}>{errorMessage}</div>}\n//       <form onSubmit={handleSubmit}>\n//         <div>\n//           <label>Bill Name:</label>\n//           <input type=\"text\" value={billName} onChange={(e) => setBillName(e.target.value)} />\n//         </div>\n//         <div>\n//           <label>Bill Category:</label>\n//           <select value={billCategory} onChange={(e) => setBillCategory(e.target.value)}>\n//             <option value=\"\">Select Bill Category</option>\n//             {billCategories.map((category) => (\n//               <option selected key={category} value={category}>{category}</option>\n//             ))}\n//           </select>\n//         </div>\n//         <div>\n//           <label>Bill Amount:</label>\n//           <input type=\"text\" value={billAmount} onChange={(e) => setBillAmount(e.target.value)} />\n//         </div>\n//         <div>\n//           <label>Upload Bill:</label>\n//           <input type=\"file\" accept=\"image/jpeg, image/jpg, image/png\" onChange={handleFileChange} />\n//         </div>\n//         <button type=\"submit\">Submit</button>\n//       </form>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n// import React, { useState, useRef } from 'react';\n// import axios from 'axios';\n// import Webcam from 'react-webcam';\n\n// function App() {\n//   const [billName, setBillName] = useState('');\n//   const [billCategory, setBillCategory] = useState('');\n//   const [billAmount, setBillAmount] = useState('');\n//   const [errorMessage, setErrorMessage] = useState('');\n//   const webcamRef = useRef(null);\n\n//   // Predefined bill category options\n//   const billCategories = ['Groceries', 'Utilities', 'Entertainment', 'Healthcare'];\n\n//   const capture = () => {\n//     const imageSrc = webcamRef.current.getScreenshot();\n//     // handle captured image\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n\n//     // Validation and sanitization\n//     if (!billName || !billCategory || !billAmount) {\n//       setErrorMessage('All fields are required');\n//       return;\n//     }\n\n//     if (!billCategories.includes(billCategory)) {\n//       setErrorMessage('Invalid bill category');\n//       return;\n//     }\n\n//     const formData = new FormData();\n//     formData.append('billName', billName.trim());\n//     formData.append('billCategory', billCategory);\n//     formData.append('billAmount', parseFloat(billAmount));\n\n//     // Capture image from webcam\n//     const imageSrc = webcamRef.current.getScreenshot();\n\n//     // Convert base64 image to Blob\n//     const blob = await fetch(imageSrc).then((res) => res.blob());\n\n//     // Append the image file to the form data with the key 'file'\n//     formData.append('file', blob, 'captured_image.jpeg');\n\n//     // Print file properties on console\n//     console.log('File Properties:');\n//     console.log('File name:', blob.name);\n//     console.log('File type:', blob.type);\n//     console.log('File size:', blob.size, 'bytes');\n\n//     // Submit form\n//     try {\n//       const response = await axios.post('http://localhost:5000/upload', formData, {\n//         headers: {\n//           'Content-Type': 'multipart/form-data'\n//         }\n//       });\n//       console.log(response.data);\n//       // Reset form fields and error message on successful upload\n//       setBillName('');\n//       setBillCategory('');\n//       setBillAmount('');\n//       setErrorMessage('');\n//     } catch (error) {\n//       console.error('Error uploading file:', error.response.data.error);\n//       setErrorMessage('Failed to upload file. Please try again later.');\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h1>Upload Bill</h1>\n//       {errorMessage && <div style={{ color: 'red' }}>{errorMessage}</div>}\n//       <form onSubmit={handleSubmit}>\n//         <div>\n//           <label>Bill Name:</label>\n//           <input type=\"text\" value={billName} onChange={(e) => setBillName(e.target.value)} />\n//         </div>\n//         <div>\n//           <label>Bill Category:</label>\n//           <select value={billCategory} onChange={(e) => setBillCategory(e.target.value)}>\n//             <option value=\"\">Select Bill Category</option>\n//             {billCategories.map((category) => (\n//               <option key={category} value={category}>{category}</option>\n//             ))}\n//           </select>\n//         </div>\n//         <div>\n//           <label>Bill Amount:</label>\n//           <input type=\"text\" value={billAmount} onChange={(e) => setBillAmount(e.target.value)} />\n//         </div>\n//         <div>\n//           <label>Upload Bill:</label>\n//           <Webcam\n//             audio={false}\n//             ref={webcamRef}\n//             screenshotFormat=\"image/jpeg\"\n//           />\n//           <button onClick={capture}>Capture</button>\n//         </div>\n//         <button type=\"submit\">Submit</button>\n//       </form>\n//     </div>\n//   );\n// }\n\n// export default App;\n\nimport React, { useState, useRef } from 'react';\nimport axios from 'axios';\nimport Webcam from 'react-webcam';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [billName, setBillName] = useState('');\n  const [billCategory, setBillCategory] = useState('');\n  const [billAmount, setBillAmount] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n  const [uploadMode, setUploadMode] = useState('file'); // 'file' or 'webcam'\n  const webcamRef = useRef(null);\n  const [billFile, setBillFile] = useState(null);\n\n  // Predefined bill category options\n  const billCategories = ['Groceries', 'Utilities', 'Entertainment', 'Healthcare'];\n  const handleFileChange = e => {\n    setUploadMode('file');\n    setBillFile(e.target.files[0]);\n  };\n  const capture = () => {\n    setUploadMode('webcam');\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    // Validation and sanitization\n    if (!billName || !billCategory || !billAmount) {\n      setErrorMessage('All fields are required');\n      return;\n    }\n    if (!billCategories.includes(billCategory)) {\n      setErrorMessage('Invalid bill category');\n      return;\n    }\n\n    // Choose appropriate upload method based on upload mode\n    if (uploadMode === 'file') {\n      // Handle file upload\n      if (!billFile) {\n        setErrorMessage('Please select a file');\n        return;\n      }\n      const formData = new FormData();\n      formData.append('billName', billName.trim());\n      formData.append('billCategory', billCategory);\n      formData.append('billAmount', parseFloat(billAmount));\n      formData.append('file', billFile);\n      // Submit form with file\n      try {\n        const response = await axios.post('http://localhost:5000/upload', formData, {\n          headers: {\n            'Content-Type': 'multipart/form-data'\n          }\n        });\n        console.log(response.data);\n        // Reset form fields and error message on successful upload\n        setBillName('');\n        setBillCategory('');\n        setBillAmount('');\n        setBillFile(null);\n        setErrorMessage('');\n      } catch (error) {\n        console.error('Error uploading file:', error.response.data.error);\n        setErrorMessage('Failed to upload file. Please try again later.');\n      }\n    } else if (uploadMode === 'webcam') {\n      // Handle webcam capture\n      const imageSrc = webcamRef.current.getScreenshot();\n      // Convert imageSrc to Blob\n      const blob = await fetch(imageSrc).then(res => res.blob());\n      // Handle image blob\n      const formData = new FormData();\n      formData.append('billName', billName.trim());\n      formData.append('billCategory', billCategory);\n      formData.append('billAmount', parseFloat(billAmount));\n      formData.append('file', blob, 'webcam_image.jpeg');\n      // Submit form with webcam image\n      try {\n        const response = await axios.post('http://localhost:5000/upload', formData, {\n          headers: {\n            'Content-Type': 'multipart/form-data'\n          }\n        });\n        console.log(response.data);\n        // Reset form fields and error message on successful upload\n        setBillName('');\n        setBillCategory('');\n        setBillAmount('');\n        setErrorMessage('');\n      } catch (error) {\n        console.error('Error uploading webcam image:', error.response.data.error);\n        setErrorMessage('Failed to upload webcam image. Please try again later.');\n      }\n    }\n  };\n  const switchMode = () => {\n    if (uploadMode === 'file') {\n      // Clear webcam image when switching back to file upload mode\n      setBillFile(null);\n    }\n    setUploadMode(uploadMode === 'file' ? 'webcam' : 'file');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Upload Bill\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 7\n    }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: 'red'\n      },\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 24\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Bill Name:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: billName,\n          onChange: e => setBillName(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Bill Category:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 345,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: billCategory,\n          onChange: e => setBillCategory(e.target.value),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Select Bill Category\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 347,\n            columnNumber: 13\n          }, this), billCategories.map(category => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: category,\n            children: category\n          }, category, false, {\n            fileName: _jsxFileName,\n            lineNumber: 349,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Bill Amount:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: billAmount,\n          onChange: e => setBillAmount(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Upload Bill:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 358,\n          columnNumber: 11\n        }, this), uploadMode === 'file' && /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \"image/jpeg, image/jpg, image/png\",\n          onChange: handleFileChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 360,\n          columnNumber: 13\n        }, this), uploadMode === 'webcam' && /*#__PURE__*/_jsxDEV(Webcam, {\n          audio: false,\n          ref: webcamRef,\n          screenshotFormat: \"image/jpeg\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 363,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: switchMode,\n          children: [\"Switch to \", uploadMode === 'file' ? 'Webcam' : 'File']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 369,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 357,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 336,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"UrIGfT4kRFW31cr1NWQgPbhSRbA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","axios","Webcam","jsxDEV","_jsxDEV","App","_s","billName","setBillName","billCategory","setBillCategory","billAmount","setBillAmount","errorMessage","setErrorMessage","uploadMode","setUploadMode","webcamRef","billFile","setBillFile","billCategories","handleFileChange","e","target","files","capture","handleSubmit","preventDefault","includes","formData","FormData","append","trim","parseFloat","response","post","headers","console","log","data","error","imageSrc","current","getScreenshot","blob","fetch","then","res","switchMode","children","fileName","_jsxFileName","lineNumber","columnNumber","style","color","onSubmit","type","value","onChange","map","category","accept","audio","ref","screenshotFormat","onClick","_c","$RefreshReg$"],"sources":["/home/s1v4h3r3/Desktop/S1V4H3R3/WEB/FILE UPLOAD MERN/client/src/App.js"],"sourcesContent":["// import React, { useState } from 'react';\n// import axios from 'axios';\n\n// function App() {\n//   const [billName, setBillName] = useState('');\n//   const [billCategory, setBillCategory] = useState('');\n//   const [billAmount, setBillAmount] = useState('');\n//   const [billFile, setBillFile] = useState(null);\n//   const [errorMessage, setErrorMessage] = useState('');\n\n//   // Predefined bill category options\n//   const billCategories = ['Groceries', 'Utilities', 'Entertainment', 'Healthcare'];\n\n//   const handleFileChange = (e) => {\n//     setBillFile(e.target.files[0]);\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n    \n//     // Validation and sanitization\n//     if (!billName || !billCategory || !billAmount || !billFile) {\n//       setErrorMessage('All fields are required');\n//       return;\n//     }\n\n//     if (!billCategories.includes(billCategory)) {\n//       setErrorMessage('Invalid bill category');\n//       return;\n//     }\n\n//     // Sanitize bill amount\n//     const sanitizedAmount = parseFloat(billAmount);\n\n//     if (isNaN(sanitizedAmount) || sanitizedAmount <= 0) {\n//       setErrorMessage('Please enter a valid amount');\n//       return;\n//     }\n\n//     // File type validation (optional)\n//     const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png'];\n//     if (!allowedTypes.includes(billFile.type)) {\n//       setErrorMessage('Invalid file type. Only JPEG, JPG, and PNG files are allowed.');\n//       return;\n//     }\n\n//     // File size validation (optional)\n//     if (billFile.size > 1024 * 1024) { // 1MB\n//       setErrorMessage('File is too large. Maximum size allowed is 1MB.');\n//       return;\n//     }\n\n//     // Create FormData object\n//     const formData = new FormData();\n//     formData.append('billName', billName.trim()); // Trim leading and trailing spaces\n//     formData.append('billCategory', billCategory);\n//     formData.append('billAmount', sanitizedAmount);\n//     formData.append('file', billFile);\n\n//     // Submit form\n//     try {\n//       const response = await axios.post('http://localhost:5000/upload', formData, {\n//         headers: {\n//           'Content-Type': 'multipart/form-data'\n//         }\n//       });\n//       console.log(response.data);\n//       // Reset form fields and error message on successful upload\n//       setBillName('');\n//       setBillCategory('');\n//       setBillAmount('');\n//       setBillFile(null);\n//       setErrorMessage('');\n//     } catch (error) {\n//       console.error('Error uploading file:', error.response.data.error);\n//       setErrorMessage('Failed to upload file. Please try again later.');\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h1>Upload Bill</h1>\n//       {errorMessage && <div style={{ color: 'red' }}>{errorMessage}</div>}\n//       <form onSubmit={handleSubmit}>\n//         <div>\n//           <label>Bill Name:</label>\n//           <input type=\"text\" value={billName} onChange={(e) => setBillName(e.target.value)} />\n//         </div>\n//         <div>\n//           <label>Bill Category:</label>\n//           <select value={billCategory} onChange={(e) => setBillCategory(e.target.value)}>\n//             <option value=\"\">Select Bill Category</option>\n//             {billCategories.map((category) => (\n//               <option selected key={category} value={category}>{category}</option>\n//             ))}\n//           </select>\n//         </div>\n//         <div>\n//           <label>Bill Amount:</label>\n//           <input type=\"text\" value={billAmount} onChange={(e) => setBillAmount(e.target.value)} />\n//         </div>\n//         <div>\n//           <label>Upload Bill:</label>\n//           <input type=\"file\" accept=\"image/jpeg, image/jpg, image/png\" onChange={handleFileChange} />\n//         </div>\n//         <button type=\"submit\">Submit</button>\n//       </form>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n\n// import React, { useState, useRef } from 'react';\n// import axios from 'axios';\n// import Webcam from 'react-webcam';\n\n// function App() {\n//   const [billName, setBillName] = useState('');\n//   const [billCategory, setBillCategory] = useState('');\n//   const [billAmount, setBillAmount] = useState('');\n//   const [errorMessage, setErrorMessage] = useState('');\n//   const webcamRef = useRef(null);\n\n//   // Predefined bill category options\n//   const billCategories = ['Groceries', 'Utilities', 'Entertainment', 'Healthcare'];\n\n//   const capture = () => {\n//     const imageSrc = webcamRef.current.getScreenshot();\n//     // handle captured image\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n\n//     // Validation and sanitization\n//     if (!billName || !billCategory || !billAmount) {\n//       setErrorMessage('All fields are required');\n//       return;\n//     }\n\n//     if (!billCategories.includes(billCategory)) {\n//       setErrorMessage('Invalid bill category');\n//       return;\n//     }\n\n//     const formData = new FormData();\n//     formData.append('billName', billName.trim());\n//     formData.append('billCategory', billCategory);\n//     formData.append('billAmount', parseFloat(billAmount));\n\n//     // Capture image from webcam\n//     const imageSrc = webcamRef.current.getScreenshot();\n\n//     // Convert base64 image to Blob\n//     const blob = await fetch(imageSrc).then((res) => res.blob());\n\n//     // Append the image file to the form data with the key 'file'\n//     formData.append('file', blob, 'captured_image.jpeg');\n\n//     // Print file properties on console\n//     console.log('File Properties:');\n//     console.log('File name:', blob.name);\n//     console.log('File type:', blob.type);\n//     console.log('File size:', blob.size, 'bytes');\n\n//     // Submit form\n//     try {\n//       const response = await axios.post('http://localhost:5000/upload', formData, {\n//         headers: {\n//           'Content-Type': 'multipart/form-data'\n//         }\n//       });\n//       console.log(response.data);\n//       // Reset form fields and error message on successful upload\n//       setBillName('');\n//       setBillCategory('');\n//       setBillAmount('');\n//       setErrorMessage('');\n//     } catch (error) {\n//       console.error('Error uploading file:', error.response.data.error);\n//       setErrorMessage('Failed to upload file. Please try again later.');\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h1>Upload Bill</h1>\n//       {errorMessage && <div style={{ color: 'red' }}>{errorMessage}</div>}\n//       <form onSubmit={handleSubmit}>\n//         <div>\n//           <label>Bill Name:</label>\n//           <input type=\"text\" value={billName} onChange={(e) => setBillName(e.target.value)} />\n//         </div>\n//         <div>\n//           <label>Bill Category:</label>\n//           <select value={billCategory} onChange={(e) => setBillCategory(e.target.value)}>\n//             <option value=\"\">Select Bill Category</option>\n//             {billCategories.map((category) => (\n//               <option key={category} value={category}>{category}</option>\n//             ))}\n//           </select>\n//         </div>\n//         <div>\n//           <label>Bill Amount:</label>\n//           <input type=\"text\" value={billAmount} onChange={(e) => setBillAmount(e.target.value)} />\n//         </div>\n//         <div>\n//           <label>Upload Bill:</label>\n//           <Webcam\n//             audio={false}\n//             ref={webcamRef}\n//             screenshotFormat=\"image/jpeg\"\n//           />\n//           <button onClick={capture}>Capture</button>\n//         </div>\n//         <button type=\"submit\">Submit</button>\n//       </form>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n\nimport React, { useState, useRef } from 'react';\nimport axios from 'axios';\nimport Webcam from 'react-webcam';\n\nfunction App() {\n  const [billName, setBillName] = useState('');\n  const [billCategory, setBillCategory] = useState('');\n  const [billAmount, setBillAmount] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n  const [uploadMode, setUploadMode] = useState('file'); // 'file' or 'webcam'\n  const webcamRef = useRef(null);\n  const [billFile, setBillFile] = useState(null);\n\n  // Predefined bill category options\n  const billCategories = ['Groceries', 'Utilities', 'Entertainment', 'Healthcare'];\n\n  const handleFileChange = (e) => {\n    setUploadMode('file');\n    setBillFile(e.target.files[0]);\n  };\n\n  const capture = () => {\n    setUploadMode('webcam');\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    // Validation and sanitization\n    if (!billName || !billCategory || !billAmount) {\n      setErrorMessage('All fields are required');\n      return;\n    }\n\n    if (!billCategories.includes(billCategory)) {\n      setErrorMessage('Invalid bill category');\n      return;\n    }\n\n    // Choose appropriate upload method based on upload mode\n    if (uploadMode === 'file') {\n      // Handle file upload\n      if (!billFile) {\n        setErrorMessage('Please select a file');\n        return;\n      }\n      const formData = new FormData();\n      formData.append('billName', billName.trim());\n      formData.append('billCategory', billCategory);\n      formData.append('billAmount', parseFloat(billAmount));\n      formData.append('file', billFile);\n      // Submit form with file\n      try {\n        const response = await axios.post('http://localhost:5000/upload', formData, {\n          headers: {\n            'Content-Type': 'multipart/form-data'\n          }\n        });\n        console.log(response.data);\n        // Reset form fields and error message on successful upload\n        setBillName('');\n        setBillCategory('');\n        setBillAmount('');\n        setBillFile(null);\n        setErrorMessage('');\n      } catch (error) {\n        console.error('Error uploading file:', error.response.data.error);\n        setErrorMessage('Failed to upload file. Please try again later.');\n      }\n    } else if (uploadMode === 'webcam') {\n      // Handle webcam capture\n      const imageSrc = webcamRef.current.getScreenshot();\n      // Convert imageSrc to Blob\n      const blob = await fetch(imageSrc).then((res) => res.blob());\n      // Handle image blob\n      const formData = new FormData();\n      formData.append('billName', billName.trim());\n      formData.append('billCategory', billCategory);\n      formData.append('billAmount', parseFloat(billAmount));\n      formData.append('file', blob, 'webcam_image.jpeg');\n      // Submit form with webcam image\n      try {\n        const response = await axios.post('http://localhost:5000/upload', formData, {\n          headers: {\n            'Content-Type': 'multipart/form-data'\n          }\n        });\n        console.log(response.data);\n        // Reset form fields and error message on successful upload\n        setBillName('');\n        setBillCategory('');\n        setBillAmount('');\n        setErrorMessage('');\n      } catch (error) {\n        console.error('Error uploading webcam image:', error.response.data.error);\n        setErrorMessage('Failed to upload webcam image. Please try again later.');\n      }\n    }\n  };\n\n  const switchMode = () => {\n    if (uploadMode === 'file') {\n      // Clear webcam image when switching back to file upload mode\n      setBillFile(null);\n    }\n    setUploadMode(uploadMode === 'file' ? 'webcam' : 'file');\n  };\n\n  return (\n    <div>\n      <h1>Upload Bill</h1>\n      {errorMessage && <div style={{ color: 'red' }}>{errorMessage}</div>}\n      <form onSubmit={handleSubmit}>\n        <div>\n          <label>Bill Name:</label>\n          <input type=\"text\" value={billName} onChange={(e) => setBillName(e.target.value)} />\n        </div>\n        <div>\n          <label>Bill Category:</label>\n          <select value={billCategory} onChange={(e) => setBillCategory(e.target.value)}>\n            <option value=\"\">Select Bill Category</option>\n            {billCategories.map((category) => (\n              <option key={category} value={category}>{category}</option>\n            ))}\n          </select>\n        </div>\n        <div>\n          <label>Bill Amount:</label>\n          <input type=\"text\" value={billAmount} onChange={(e) => setBillAmount(e.target.value)} />\n        </div>\n        <div>\n          <label>Upload Bill:</label>\n          {uploadMode === 'file' && (\n            <input type=\"file\" accept=\"image/jpeg, image/jpg, image/png\" onChange={handleFileChange} />\n          )}\n          {uploadMode === 'webcam' && (\n            <Webcam\n              audio={false}\n              ref={webcamRef}\n              screenshotFormat=\"image/jpeg\"\n            />\n          )}\n          <button type=\"button\" onClick={switchMode}>Switch to {uploadMode === 'file' ? 'Webcam' : 'File'}</button>\n        </div>\n        <button type=\"submit\">Submit</button>\n      </form>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAC/C,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,QAAQ,EAAEC,WAA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}